// A simple service to manage user settings persistence.
const VOLUME_KEY = 'user_volume';
const VOICE_KEY = 'user_voice';
const FONT_SIZE_KEY = 'user_font_size';
const SPEED_KEY = 'user_speed';
const THEME_KEY = 'user_theme'; // Updated from BACKGROUND_KEY
const LISTENING_MODE_KEY = 'user_listening_mode';
const LIBRARY_BOOKS_KEY = 'user_library_books';
const READING_TIME_KEY = 'user_reading_time'; // Key for total reading time

// Define interfaces for our settings and theme structures for type safety
interface UserSettings {
    volume: number;
    voice: string;
    fontSize: number;
    speed: number;
    theme: string;
    SpeakingPerson: string;
}

interface ThemeStyles {
    backgroundColor: string;
    primaryTextColor: string;
    secondaryTextColor: string;
    borderColor: string;
    activeColor: string;
    navBar: {
        backgroundColor: string;
        textColor: string;
    };
    tabBar: {
        backgroundColor: string;
        textColor: string;
        activeTextColor: string;
    };
    listItem: {
        backgroundColor: string;
        textColor: string;
        borderColor: string;
    };
    button: {
        backgroundColor: string;
        textColor: string;
    };
}

const settingsCacheService = {
    /**
     * Retrieves all user settings from storage.
     * @returns {UserSettings} An object containing all user settings.
     */
    getSettings(): UserSettings {
        return {
            volume: uni.getStorageSync(VOLUME_KEY) || 80,
            voice: uni.getStorageSync(VOICE_KEY) || 'Female Voice',
            fontSize: uni.getStorageSync(FONT_SIZE_KEY) || 16,
            speed: uni.getStorageSync(SPEED_KEY) || 1.0,
            theme: uni.getStorageSync(THEME_KEY) || 'White', // Updated to theme
            SpeakingPerson: uni.getStorageSync(LISTENING_MODE_KEY) || 'Once'
        };
    },

    /**
     * Retrieves a comfortable, soft-contrast style object for a given theme.
     * @param {string} themeName - The name of the theme ('White', 'Black', 'Light Brown').
     * @returns {ThemeStyles} An object containing theme-specific styles for various UI components.
     */
    getThemeContent(themeName: string): ThemeStyles {
        switch (themeName) {
            case 'Black':
                // Dominant Colors: Deep Charcoal (#121212) and Light Gray (#E0E0E0)
                return {
                    // General Colors
                    backgroundColor: '#121212',
                    primaryTextColor: '#E0E0E0',
                    secondaryTextColor: '#B0B0B0', // A softer gray for secondary text
                    borderColor: '#444444',        // A darker gray for subtle borders
                    activeColor: '#E0E0E0',        // Active elements use the primary text color

                    // Component-specific styles
                    navBar: {
                        backgroundColor: '#1E1E1E', // Slightly lighter than the main background
                        textColor: '#E0E0E0'
                    },
                    tabBar: {
                        backgroundColor: '#1E1E1E',
                        textColor: '#B0B0B0',
                        activeTextColor: '#E0E0E0'
                    },
                    listItem: {
                        backgroundColor: '#1E1E1E',
                        textColor: '#E0E0E0',
                        borderColor: '#444444'
                    },
                    button: {
                        backgroundColor: '#E0E0E0',
                        textColor: '#121212' // Inverted for good contrast
                    }
                };
            case 'Light Brown':
                // Dominant Colors: Muted Cream (#FAF3E0) and Deep Brown (#5B4636)
                return {
                    // General Colors
                    backgroundColor: '#FAF3E0',
                    primaryTextColor: '#5B4636',
                    secondaryTextColor: '#8D6E63', // A softer brown
                    borderColor: '#D7CCC8',
                    activeColor: '#5B4636',

                    // Component-specific styles
                    navBar: {
                        backgroundColor: '#F5EBE0', // A slightly different cream tone
                        textColor: '#5B4636'
                    },
                    tabBar: {
                        backgroundColor: '#F5EBE0',
                        textColor: '#8D6E63',
                        activeTextColor: '#5B4636'
                    },
                    listItem: {
                        backgroundColor: '#FFFFFF', // A slightly whiter list item for separation
                        textColor: '#5B4636',
                        borderColor: '#D7CCC8'
                    },
                    button: {
                        backgroundColor: '#5B4636',
                        textColor: '#FAF3E0' // Inverted for good contrast
                    }
                };
            case 'White':
            default:
                // Dominant Colors: Off-White (#F8F9FA) and Dark Gray (#212529)
                return {
                    // General Colors
                    backgroundColor: '#F8F9FA',
                    primaryTextColor: '#212529',
                    secondaryTextColor: '#6C757D', // A standard gray for secondary text
                    borderColor: '#DEE2E6',
                    activeColor: '#212529',

                    // Component-specific styles
                    navBar: {
                        backgroundColor: '#FFFFFF', // A clean white for the nav bar
                        textColor: '#212529'
                    },
                    tabBar: {
                        backgroundColor: '#FFFFFF',
                        textColor: '#6C757D',
                        activeTextColor: '#212529'
                    },
                    listItem: {
                        backgroundColor: '#FFFFFF',
                        textColor: '#212529',
                        borderColor: '#DEE2E6'
                    },
                    button: {
                        backgroundColor: '#212529',
                        textColor: '#F8F9FA' // Inverted for good contrast
                    }
                };
        }
    },

    saveVolume(volume: number) { uni.setStorageSync(VOLUME_KEY, volume); },
    saveVoice(voice: string) { uni.setStorageSync(VOICE_KEY, voice); },
    saveFontSize(size: number) { uni.setStorageSync(FONT_SIZE_KEY, size); },
    saveSpeed(speed: number) { uni.setStorageSync(SPEED_KEY, speed); },
    saveTheme(theme: string) { uni.setStorageSync(THEME_KEY, theme); }, // Updated to saveTheme
    saveSpeakingPerson(mode: string) { uni.setStorageSync(LISTENING_MODE_KEY, mode); },
    
};

export default settingsCacheService;